chisq.test(cont.table)
df <- data.frame(
Y, X
)
head(df)
table(df$Y)
table(df$X)
df <- data.frame(
Y, X,
D = ifelse(X == 2, 1, 0),
R = ifelse(X == 0, 0, 1)
)
head(df)
table(df$)
table(df$X, df$D)
table(df$D, df$R)
X1 <- c(rep( 0, times = 2117), rep(1, times = 4772), rep(2, times = 2647))
X2 <- c(rep( 0, times = 1990), rep(1, times = 3857), rep(2, times = 1930))
X <- c(X1, X2)
D <- ifelse( X==2, 1, 0)
R <- ifelse( X==0, 1, 0)
Y1 <- rep(0, times = 2117+4772+2647)
Y2 <- rep(1, times = 1990+3857+1930)
Y <- c(Y1, Y2)
d = data.frame(X,D,R,Y)
M0 = glm(Y ~ 1, family = 'binomial')
Ma = glm(Y ~ X, family = 'binomial')
Md = glm(Y ~ d, family = 'binomial')
Md = glm(Y ~ D, family = 'binomial')
Mr = glm(Y ~ R, family = 'binomial')
Mad = glm(Y ~ X + D, family = 'binomial')
Mar = glm(Y ~ X + R, family = 'binomial')
M3 = glm(Y ~ as.factor(X), family = 'binomial')
summary(M0)
summary(Ma)
ar = predict(Mar)
head(ar)
summary(ar)
table(ar)
ad = predict(Mad)
head(ad)
head(ad - ar)
rm(ar, ad)
anova(M0, Ma, test = 'Chisq')
anova(Ma, M3, test = 'Chisq')
anova(M0, M3, test = 'Chisq')
coef(Ma)
L = coef(Ma)[1] + coef(Ma)[2]*0:2
print(L)
Pr = exp(L)/(1+exp*(L))
Pr = exp(L)/(1+exp(L))
print(Pr)
d = dara.frame(X,Y)
d = data.frame(X,Y)
r = sample(nrow(d), size = nrow(d)/2, replace = FALSE)
d.half <- d[r,]
rm(d,r,d.half)
d = data.frame(X,Y)
for (sample.size in seq(100,17000,100)) {
r = sample(nrow(d), size = sample.size, replace = FALSE)
fit.subset <- glm(Y~X, family='binomial', data=d, subset=r)
a = anova(fit.subset, test='Chisq')
cat(sample.size, '\t', a[2,5], '\n')
}
pvals = c()
a$`Pr(>Chi)`
a$`Pr(>Chi)`[2]
a[2,5]
pvals = c()
for (sample.size in seq(100,17000,100)) {
r = sample(nrow(d), size = sample.size, replace = FALSE)
fit.subset <- glm(Y~X, family='binomial', data=d, subset=r)
a = anova(fit.subset, test='Chisq')
pvals <- c(pvals, a$`Pr(>Chi)`[2])
}
logP = -log10(pvals)
plot(seeq(100,17000,100), logP, pch=20, cex=0.5,
xlab='sample size', ylab='logP')
plot(seq(100,17000,100), logP, pch=20, cex=0.5,
xlab='sample size', ylab='logP')
0.3*1.3*1.3
X1 <- c(rep( 0, times = 500), rep(1, times = 600), rep(2, times = 400))
X2 <- c(rep( 0, times = 500), rep(1, times = 670), rep(2, times = 800))
X <- c(X1, X2)
Y1 <- rep(0, times = 500+600+400)
Y2 <- rep(1, times = 500+670+800)
Y <- c(Y1, Y2)
glm(Y~X, family = 'binomial')
glm(Y~factor(X), family = 'binomial')
head(X)
table(X,Y)
summary(glm(Y~factor(X), family = 'binomial'))
summary(glm(Y~X, family = 'binomial'))
genes.hrd <- c('PSMD6', 'RORC', 'RCCD1', 'VPS33A', 'FN3KRP', 'LOXL4', 'PDIA3P1', 'IGLV5-45', 'BRCA2', 'MRPL45', 'SEPTIN3', 'TFDP1', 'HNRNPCP1', 'SNHG21', 'MELTF', 'ERGIC3', 'BRCA1', 'GSC', 'CYB561D2', 'IGKV2-30')
genes.hrp <- c('PSMD6', 'RORC', 'RCCD1', 'VPS33A', 'FN3KRP', 'LOXL4', 'PDIA3P1', 'IGLV5-45', 'BRCA2', 'MRPL45', 'SEPTIN3', 'TFDP1', 'HNRNPCP1', 'SNHG21', 'MELTF', 'ERGIC3', 'BRCA1', 'GSC', 'CYB561D2', 'IGKV2-30')
imp.hrp <- c(0.164416, 0.16630068, 0.17611828, 0.1909877, 0.19734164, 0.23357543, 0.23674469, 0.23679788, 0.2460002, 0.36714947, 0.46391642, 0.4837166, 0.50186276, 0.5282838, 0.7580656, 0.86822206, 0.9, 0.99867743, 0.9987477, 1.0)
genes.hrp <- genes.hrp[imp.hrp > .4]
genes.hrd <- c('MTFR1L', 'GAL', 'VBP1', 'DCUN1D5', 'UBL4A', 'HLA-L', 'C1QL1', 'RAMAC', 'DZANK1', 'KCTD2', 'RAB6B', 'AP2A2', 'TRAF4', 'C18orf54', 'ACVR1B', 'RAB2A', 'BRCA1', 'IFT22', 'RNU7-171P', 'SNRPA1')
imp.hrd <- c(0.2306412, 0.27039495, 0.2735796, 0.2986108, 0.3067166, 0.36189926, 0.36591884, 0.40656418, 0.42273358, 0.42393845, 0.42528114, 0.4905383, 0.56876045, 0.6402051, 0.72285855, 0.7817312, 0.9, 0.98991853, 0.9941757, 1.0)
genes.hrd <- genes.hrd[imp.hrd > .4]
union(genes.hrd, genes.hrp)
union(genes.hrp, genes.hrd)
intersect(genes.hrp, genes.hrd)
x = seq(-100,100,by = 1)
y = exp(x)/(1+exp(x))
plot(x,y)
y[x==0]
#####
## Processing of ICGC WGS breast cancer samples to infer SBS and indel mutation type contributions
####
# Load libraries
library(maftools)
library(sigminer)
library(BSgenome.Hsapiens.UCSC.hg19)
## Load UK and EU BRCA data (US is exome, FR contains no indels)
# Extract WGS strategies, remove duplicated mutations
brca_uk <- read.table('~/Downloads/simple_somatic_mutation.open.BRCA-UK.tsv',
sep = '\t', header = TRUE)
brca_uk_wgs <- brca_uk[brca_uk$sequencing_strategy == 'WGS', ]
brca_uk_wgs <- brca_uk_wgs[!duplicated(brca_uk_wgs$icgc_mutation_id), ]
brca_eu <- read.table('~/Downloads/simple_somatic_mutation.open.BRCA-EU.tsv',
sep = '\t', header = TRUE)
brca_eu_wgs <- brca_eu[brca_eu$sequencing_strategy == 'WGS', ]
brca_eu_wgs <- brca_eu_wgs[!duplicated(brca_eu_wgs$icgc_mutation_id), ]
# Collate ICGC data and organise into MAF-readable format
brca_wgs <- rbind(brca_uk_wgs, brca_eu_wgs)
brca_wgs_input <- data.frame(
Tumor_Sample_Barcode = brca_wgs$icgc_donor_id,
Hugo_Symbol = NA,
Chromosome = brca_wgs$chromosome,
Start_position = brca_wgs$chromosome_start,
End_position = brca_wgs$chromosome_end,
Variant_Classification = brca_wgs$consequence_type,
Variant_Type = sapply(brca_wgs$mutation_type,
function(x) ifelse(x == 'single base substitution', 'SNP',
ifelse(x == 'insertion of <=200bp', 'INS',
ifelse(x == 'deletion of <=200bp', 'DEL',NA)))),
Reference_Allele = brca_wgs$reference_genome_allele,
Tumor_Seq_Allele2 = brca_wgs$mutated_to_allele
)
# Exon coding regions
exons <- read.table('~/Documents/PhD/Data/hg19_exonRegions.txt', sep = ',')
exons$chromosome <- sapply(exons$V2, function(x) substr(x,4,nchar(x)))
exon.function <- function(x) {
index.i <- x$Chromosome == exons$chromosome &
x$Start_position > exons$V4 &
x$End_position < exons$V5
exon.i <- index.i > 0
return(exon.i)
}
brca_wgs_input$exome <- apply(brca_wgs_input, 1, exon.function)
?apply
i = 1
ls()
row1 <- brca_wgs_input[1,]
row1[['Chromosome']]
exon.function <- function(x) {
index.i <- x[['Chromosome']] == exons$chromosome &
x[['Start_position']] > exons$V4 &
x[[$'End_position']] < exons$V5
exon.function <- function(x) {
index.i <- x[['Chromosome']] == exons$chromosome &
x[['Start_position']] > exons$V4 &
x[['End_position']] < exons$V5
exon.i <- index.i > 0
return(exon.i)
}
brca_wgs_input$exome <- apply(brca_wgs_input, 1, exon.function)
#####
## Processing of ICGC WGS breast cancer samples to infer SBS and indel mutation type contributions
####
# Load libraries
library(maftools)
library(sigminer)
library(BSgenome.Hsapiens.UCSC.hg19)
## Load UK and EU BRCA data (US is exome, FR contains no indels)
# Extract WGS strategies, remove duplicated mutations
brca_uk <- read.table('~/Downloads/simple_somatic_mutation.open.BRCA-UK.tsv',
sep = '\t', header = TRUE)
brca_uk_wgs <- brca_uk[brca_uk$sequencing_strategy == 'WGS', ]
brca_uk_wgs <- brca_uk_wgs[!duplicated(brca_uk_wgs$icgc_mutation_id), ]
brca_eu <- read.table('~/Downloads/simple_somatic_mutation.open.BRCA-EU.tsv',
sep = '\t', header = TRUE)
brca_eu_wgs <- brca_eu[brca_eu$sequencing_strategy == 'WGS', ]
brca_eu_wgs <- brca_eu_wgs[!duplicated(brca_eu_wgs$icgc_mutation_id), ]
# Collate ICGC data and organise into MAF-readable format
brca_wgs <- rbind(brca_uk_wgs, brca_eu_wgs)
brca_wgs_input <- data.frame(
Tumor_Sample_Barcode = brca_wgs$icgc_donor_id,
Hugo_Symbol = NA,
Chromosome = brca_wgs$chromosome,
Start_position = brca_wgs$chromosome_start,
End_position = brca_wgs$chromosome_end,
Variant_Classification = brca_wgs$consequence_type,
Variant_Type = sapply(brca_wgs$mutation_type,
function(x) ifelse(x == 'single base substitution', 'SNP',
ifelse(x == 'insertion of <=200bp', 'INS',
ifelse(x == 'deletion of <=200bp', 'DEL',NA)))),
Reference_Allele = brca_wgs$reference_genome_allele,
Tumor_Seq_Allele2 = brca_wgs$mutated_to_allele
)
# Exon coding regions
exons <- read.table('~/Documents/PhD/Data/hg19_exonRegions.txt', sep = ',')
exons$chromosome <- sapply(exons$V2, function(x) substr(x,4,nchar(x)))
exon.function <- function(x) {
index.i <- x[['Chromosome']] == exons$chromosome &
x[['Start_position']] > exons$V4 &
x[['End_position']] < exons$V5
exon.i <- sum(index.i) > 0
return(exon.i)
}
brca_wgs_input$exome <- apply(brca_wgs_input, 1, exon.function)
ls()
exon.function <- function(x) {
index.i <- exons$chromosome == x[['Chromosome']] &
exons$V4 <= x[['Start_position']] &
exons$V5 >= x[['End_position']]
exon.i <- sum(index.i) > 0
return(exon.i)
}
dim(brca_wgs_input)
brca_wgs_input$exome <- apply(brca_wgs_input, 1, exon.function)
exome <- apply(brca_wgs_input[1:10,], 1, exon.function)
exome
exome <- apply(brca_wgs_input[1:1000,], 1, exon.function)
Sys.time();exome <- apply(brca_wgs_input[1:10,], 1, exon.function);Sys.time()
Sys.time();exome <- apply(brca_wgs_input[1:10,], 1, exon.function);Sys.time()
dim(brca_wgs_input)
4316415 / 60
4316415 / 60*60
4316415 / 3600
ls()
brca2.exome <- vector(length = 1000)
# Exon coding regions
exons <- read.table('~/Documents/PhD/Data/hg19_exonRegions.txt', sep = ',')
exons$chromosome <- sapply(exons$V2, function(x) substr(x,4,nchar(x)))
head(exons)
exons2 <- exons[1:100, ]
rm(exons2)
?cor
#####
## Processing of ICGC WGS breast cancer samples to infer SBS and indel mutation type contributions
####
# Load libraries
library(maftools)
library(sigminer)
library(BSgenome.Hsapiens.UCSC.hg19)
## Load UK and EU BRCA data (US is exome, FR contains no indels)
# Extract WGS strategies, remove duplicated mutations
brca_uk <- read.table('~/Downloads/simple_somatic_mutation.open.BRCA-UK.tsv',
sep = '\t', header = TRUE)
brca_uk_wgs <- brca_uk[brca_uk$sequencing_strategy == 'WGS', ]
brca_uk_wgs <- brca_uk_wgs[!duplicated(brca_uk_wgs$icgc_mutation_id), ]
brca_eu <- read.table('~/Downloads/simple_somatic_mutation.open.BRCA-EU.tsv',
sep = '\t', header = TRUE)
brca_eu_wgs <- brca_eu[brca_eu$sequencing_strategy == 'WGS', ]
brca_eu_wgs <- brca_eu_wgs[!duplicated(brca_eu_wgs$icgc_mutation_id), ]
# Collate ICGC data and organise into MAF-readable format
brca_wgs <- rbind(brca_uk_wgs, brca_eu_wgs)
brca_wgs_input <- data.frame(
Tumor_Sample_Barcode = brca_wgs$icgc_donor_id,
Hugo_Symbol = NA,
Chromosome = brca_wgs$chromosome,
Start_position = brca_wgs$chromosome_start,
End_position = brca_wgs$chromosome_end,
Variant_Classification = brca_wgs$consequence_type,
Variant_Type = sapply(brca_wgs$mutation_type,
function(x) ifelse(x == 'single base substitution', 'SNP',
ifelse(x == 'insertion of <=200bp', 'INS',
ifelse(x == 'deletion of <=200bp', 'DEL',NA)))),
Reference_Allele = brca_wgs$reference_genome_allele,
Tumor_Seq_Allele2 = brca_wgs$mutated_to_allele
)
# Exon coding regions
exons <- read.table('~/Documents/PhD/Data/hg19_exonRegions.txt', sep = ',')
exons$chromosome <- sapply(exons$V2, function(x) substr(x,4,nchar(x)))
#####
## Processing of ICGC WGS breast cancer samples to infer SBS and indel mutation type contributions
####
# Load libraries
library(maftools)
library(sigminer)
library(BSgenome.Hsapiens.UCSC.hg19)
## Load UK and EU BRCA data (US is exome, FR contains no indels)
# Extract WGS strategies, remove duplicated mutations
brca_uk <- read.table('~/Downloads/simple_somatic_mutation.open.BRCA-UK.tsv',
sep = '\t', header = TRUE)
exons2 <- exons[1:100, ]
brca_exons <- vector(length = nrow(brca_wgs_input))
exon.i <- exons2[i,]
i=1
exon.i <- exons2[i,]
for (i in 1:100) {
print(i)
exon.i <- exons2[i,]
vec <- brca_wgs_input$Chromosome == exon.i$chromosome &
brca_wgs_input$Start_position > exon.i$V4 &
brca_wgs_input$End_position < exon.i$V5
brca_exons[vec] <- TRUE
}
table(brca_exons)
exons2 <- exons[1:1000, ]
brca_exons <- vector(length = nrow(brca_wgs_input))
Sys.time(); for (i in 1:nrow(exons2)) {
print(i)
exon.i <- exons2[i,]
vec <- brca_wgs_input$Chromosome == exon.i$chromosome &
brca_wgs_input$Start_position > exon.i$V4 &
brca_wgs_input$End_position < exon.i$V5
brca_exons[vec] <- TRUE
}; Sys.time()
101 %%100
exons2 <- exons[1:1000, ]
brca_exons <- vector(length = nrow(brca_wgs_input))
Sys.time(); for (i in 1:nrow(exons2)) {
ifelse(i %% 100 == 0) print(i)
Sys.time(); for (i in 1:nrow(exons2)) {
if (i %% 100 == 0) print(i)
exon.i <- exons2[i,]
vec <- brca_wgs_input$Chromosome == exon.i$chromosome &
brca_wgs_input$Start_position > exon.i$V4 &
brca_wgs_input$End_position < exon.i$V5
brca_exons[vec] <- TRUE
}; Sys.time()
table(brca_exons)
load('~/Documents/GitHub/HRD_classification/Results/ExomeClassifier/TCGA_BRCA/')
load('~/Documents/GitHub/HRD_classification/Results/ExomeClassifier/TCGA_BRCA/TCGA_HRD_resultsSummary.Rdata')
head(results.tcga_df)
ubqln4 <- c('TCGA-A7-A0DA-01','TCGA-BH-A0C0-01','TCGA-AN-A0XN-01',
'TCGA-C8-A1HJ-01','TCGA-AN-A046-01','TCGA-A2-A0YG-01')
ubqln4 <- substr(ubqln4, 1, 12)
results.tcga_df[ubqln4,]
ubqln4 <- c('TCGA-A7-A0DA-01','TCGA-BH-A0C0-01','TCGA-AN-A0XN-01',
'TCGA-C8-A1HJ-01','TCGA-AN-A046-01','TCGA-BH-A18V-01')
ubqln4 <- substr(ubqln4, 1, 12)
results.tcga_df[ubqln4,]
load('~/Documents/GitHub/HRD_classification/Results/ExomeClassifier/TCGA_BRCA/TCGA_HRD_annotation.Rdata')
rm(results.tcga_df)
head(ann_tcga)
ann_tcga[ubqln4,]
ubqln4 <- c('TCGA-A7-A0DA-01','TCGA-BH-A0C0-01','TCGA-AN-A0XN-01',
'TCGA-C8-A1HJ-01','TCGA-AN-A046-01','TCGA-BH-A18V-01',
'TCGA-A2-A0YG-01')
ubqln4 <- substr(ubqln4, 1, 12)
ann_tcga[ubqln4,]
load('~/Documents/GitHub/HRD_classification/Data/PriorClusters/ICGC_Clust19_mclust_meanCont.Rdata')
priors.full <- mut.dists_mean
load('~/Documents/PhD/Data/ExonOnly_Priors/ICGC_Clust19_mclust_meanCont_exonOnly.Rdata')
priors.exon <- mut.dists_mean; rm(mut.dists_mean)
priors.exon <- priors.exon[rownames(priors.full), ]
corr <- vector(length = 19)
for (i in 1:19) corr[i] <- cor(as.numeric(priors.exon[i,]),
as.numeric(priors.full[i,]))
df <- data.frame(
cluster = rownames(priors.exon), corr
)
df$group <- sapply(df$cluster, function(x) strsplit(x,split='_')[[1]][1])
ggplot(df, aes(x = cluster, y = corr, fill = group)) +
geom_bar(stat = 'identity') +
theme(axis.text.x = element_blank())
library(ggplot2)
load('~/Documents/GitHub/HRD_classification/Data/PriorClusters/ICGC_Clust19_mclust_meanCont.Rdata')
priors.full <- mut.dists_mean
load('~/Documents/PhD/Data/ExonOnly_Priors/ICGC_Clust19_mclust_meanCont_exonOnly.Rdata')
priors.exon <- mut.dists_mean; rm(mut.dists_mean)
priors.exon <- priors.exon[rownames(priors.full), ]
corr <- vector(length = 19)
for (i in 1:19) corr[i] <- cor(as.numeric(priors.exon[i,]),
as.numeric(priors.full[i,]))
df <- data.frame(
cluster = rownames(priors.exon), corr
)
df$group <- sapply(df$cluster, function(x) strsplit(x,split='_')[[1]][1])
ggplot(df, aes(x = cluster, y = corr, fill = group)) +
geom_bar(stat = 'identity') +
theme(axis.text.x = element_blank())
ratios <- priors.exon / priors.full
ratio_summ <- data.frame(
Mutation = colnames(ratios),
Ratio = apply(ratios,2, median)
)
library(deconstructSigs)
ratio_summ[1:96,] <- ratio_summ[names(signatures.cosmic),]
ratio_sbs <- ratio_summ[1:96, ]
ratio_indel <- ratio_summ[97:179,]
ratio_sbs$type <- substr(ratio_sbs$Mutation, 3, 5)
ratio_sbs$Mutation <- factor(ratio_sbs$Mutation,
levels = ratio_sbs$Mutation)
ggplot(ratio_sbs, aes(x = Mutation, y = Ratio, fill = type)) +
geom_bar(stat = 'identity') + theme(axis.text.x = element_blank(),
legend.position = 'top') +
geom_hline(yintercept = 1)
ratio_indel$type <- substr(ratio_indel$Mutation, 3, 7)
ratio_indel$Mutation <- factor(ratio_indel$Mutation,
levels = ratio_indel$Mutation)
ggplot(ratio_indel, aes(x = Mutation, y = Ratio, fill = type)) +
geom_bar(stat = 'identity') + theme(axis.text.x = element_blank(),
legend.position = 'top') +
geom_hline(yintercept = 1)
load('~/Documents/GitHub/HRD_classification/Data/PriorClusters/ICGC_Clust19_mclust_meanCont.Rdata')
priors.full <- mut.dists_mean
load('~/Documents/PhD/Data/ExonOnly_Priors/ICGC_Clust19_mclust_meanCont_exonOnly.Rdata')
priors.exon <- mut.dists_mean; rm(mut.dists_mean)
priors.exon <- priors.exon[rownames(priors.full), ]
corr <- vector(length = 19)
for (i in 1:19) corr[i] <- cor(as.numeric(priors.exon[i,]),
as.numeric(priors.full[i,]))
df <- data.frame(
cluster = rownames(priors.exon), corr
)
df$group <- sapply(df$cluster, function(x) strsplit(x,split='_')[[1]][1])
ggplot(df, aes(x = cluster, y = corr, fill = group)) +
geom_bar(stat = 'identity') +
theme(axis.text.x = element_blank())
library(ggplot2)
load('~/Documents/GitHub/HRD_classification/Data/PriorClusters/ICGC_Clust19_mclust_meanCont.Rdata')
priors.full <- mut.dists_mean
load('~/Documents/PhD/Data/ExonOnly_Priors/ICGC_Clust19_mclust_meanCont_exonOnly.Rdata')
priors.exon <- mut.dists_mean; rm(mut.dists_mean)
priors.exon <- priors.exon[rownames(priors.full), ]
corr <- vector(length = 19)
for (i in 1:19) corr[i] <- cor(as.numeric(priors.exon[i,]),
as.numeric(priors.full[i,]))
df <- data.frame(
cluster = rownames(priors.exon), corr
)
df$group <- sapply(df$cluster, function(x) strsplit(x,split='_')[[1]][1])
ggplot(df, aes(x = cluster, y = corr, fill = group)) +
geom_bar(stat = 'identity') +
theme(axis.text.x = element_blank())
ratios <- priors.exon / priors.full
ratio_summ <- data.frame(
Mutation = colnames(ratios),
Ratio = apply(ratios,2, median)
)
library(deconstructSigs)
ratio_summ[1:96,] <- ratio_summ[names(signatures.cosmic),]
ratio_sbs <- ratio_summ[1:96, ]
ratio_indel <- ratio_summ[97:179,]
ratio_sbs$type <- substr(ratio_sbs$Mutation, 3, 5)
ratio_sbs$Mutation <- factor(ratio_sbs$Mutation,
levels = ratio_sbs$Mutation)
ggplot(ratio_sbs, aes(x = Mutation, y = Ratio, fill = type)) +
geom_bar(stat = 'identity') + theme(axis.text.x = element_blank(),
legend.position = 'top') +
geom_hline(yintercept = 1)
ratio_indel$type <- substr(ratio_indel$Mutation, 3, 7)
ratio_indel$Mutation <- factor(ratio_indel$Mutation,
levels = ratio_indel$Mutation)
ggplot(ratio_indel, aes(x = Mutation, y = Ratio, fill = type)) +
geom_bar(stat = 'identity') + theme(axis.text.x = element_blank(),
legend.position = 'top') +
geom_hline(yintercept = 1)
ratios
ratios[1:5,1:5]
library(tidyr)
names(ratios)
ratios.plot <- ratios %>%
pivot_longer(names_to = Mutation, values_to = Ratio)
ratios[1:5,1:5]
ratios2 <- ratios; ratios2$Pheno <- rownames(ratios2)
ratios.plot <- ratios2 %>%
pivot_longer(cols = -Pheno, names_to = Mutation, values_to = Ratio)
ratios.plot <- ratios2 %>%
pivot_longer(cols = -Pheno, names_to = 'Mutation', values_to = 'Ratio')
head(ratios.plot)
ratio_sbs$Mutation
ratios.plot$Mutation <- factor(ratios.plot$Mutation,
levels = c(ratio_sbs$Mutation, ratio_indel$Mutation))
ratios.plot[1:5,1:5]
head(ratios.plot)
sort(unique(ratios.plot$Pheno))
ratios.plot$Pheno <- factor(ratios.plot$Pheno,
levels = sort(unique(ratios.plot$Pheno)))
head(ratios.plot)
ratios.plot$type <- ifelse(grepl(pattern = '>', ratios.plot$Mutation),
'SBS','indel')
head(ratios.plot)
ggplot(ratios.plot, aes(x = Mutation, y = Ratio, fill = type)) +
geom_bar(stat = 'identity') + facet_wrap(~ Pheno)
ggplot(ratios.plot, aes(x = Mutation, y = Ratio, fill = type)) +
geom_bar(stat = 'identity') +
theme(axis.text.x = element_blank(),
legend.position = 'bottom') +
geom_hline(yintercept = 1) +
facet_wrap(~ Pheno, scales = 'free')
load('~/Documents/GitHub/HRD_classification/Results/TranscriptionalSignature/Templates/BRCA_defect/template_BRCA_ElasticNet.Rdata')
cat(rownames(template.brca), sep = '\t')
cat(rownames(template.brca), sep = '\n')
setwd('~/Documents/GitHub/HRD_classification/Data/TCGA_BRCA/')
setwd('../ICGC_BRCA/')
load('ICGC_BRCA_PhenotypeAnnotation.Rdata')
head(ann)
ann$SampleID <- rownames(ann)
ann <- ann[,c(8,7,3,4,5,6,2)]
head(ann)
table(ann$BRCA_defect)
View(ann)
cat(ann, sep = '\t')
install.packages('clipr')
library(clipr)
clipr::write_clip(ann)
table(ann$BRCA_defect)
setwd('~/Documents/GitHub/HRD_classification/Data/TCGA_BRCA/')
setwd('~/Documents/GitHub/HRD_classification/Results/ExomeClassifier/TCGA_BRCA/')
load('TCGA_HRD_logLikelihoods.Rdata')
load('TCGA_HRD_annotation.Rdata')
head(ann_tcga)
ann_tcga$PatientID <- rownames(ann_tcga)
ann_tcga <- ann_tcga[,c(6,1:5)]
table(duplicated(ann_tcga$PatientID))
clipr::write_clip(ann_tcga)
